from django.shortcuts import render
from django.shortcuts import render, redirect, get_object_or_404
from django.core.urlresolvers import reverse
from django.contrib.auth import authenticate, login
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import HttpResponseRedirect, HttpResponse
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.views.generic import View, DetailView, UpdateView, ListView, CreateView, TemplateView
from django.views.generic.base import RedirectView
from django.views.generic.detail import SingleObjectMixin
from django.utils.decorators import method_decorator


from person.models import Person, PersonVitals, PersonContacts, PersonDemographic, PersonGuardian

from person.forms import PersonForm, PersonVitalsForm, PersonDemographicForm, PersonContactForm, PersonNextofKinForm

# Create your views here.
class LoginRequiredMixin(object):
    @method_decorator(login_required)

    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    
class IndexView(ListView):
    model = Person
    form_class = PersonForm
    template_name = 'person/index.html'
    context_object_name = 'person_list'
    
class PersonMixin(object):
    
    @property
    def success_msg(self):
        return NotImplemented

    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(PersonMixin, self).form_valid(form)

    
class PersonCreateView(PersonMixin, CreateView):
    fields = ('first_name', 'surname', 'home_village', 'person_photo')
    model = Person    
    success_msg = 'Person successfully added!'
    success_url = '/patient/'
    template_name = 'person/create_person.html'
    
    
class PersonUpdateView(PersonMixin, UpdateView):
    fields = ('first_name', 'surname', 'home_village', 'person_photo')
    template_name = 'person/update_person.html'
    model = Person
    context_object_name = 'person'
    success_url = '/patient/'

    
class PersonDetailView(ListView):
    template_name = 'person/profile.html'

    def get(self, request, *args, **kwargs):
        self.object = get_object_or_404(Person, pk = kwargs['pk'])
        return super(PersonDetailView, self).get(request, *args, **kwargs)
    
    def get_queryset(self):
        return self.object

    def get_context_data(self, **kwargs):
        context = super(PersonDetailView, self).get_context_data(**kwargs)
        context['person'] = self.object
        models = {
<<<<<<< HEAD
                'vitals':PersonVitals,
                'demographic':PersonDemographic,                
                'contacts':PersonContacts,
                'nextofkin':PersonGuardian
=======
                'demographic':PersonDemographic,
                'nextofkin':PersonGuardian,
                'vitals':PersonVitals,
                'contacts':PersonContacts,                
>>>>>>> 3cae46e3b7c8f59701014d047ef691f8557df5b6
            }
        for key, model in models.items():
            person_object = ''
            try:
                print(model)
                person_object = model.objects.get(person = self.object)
                print("The name is {}".format(person_object.id))
            except:
                pass
            if person_object:
                context[key] = person_object
        return context


class ProfileMixin(object):
    template = ''
    form = None
    
    def get(self, request, **kwargs):
        personObj = Person.objects.get(pk = kwargs['pk'])
        form = self.form()
        return render(request, self.template, {"person":personObj, "form":form})

    def post(self, request, **kwargs):
        form = self.form(request.POST)
        personObj = Person.objects.get(pk = kwargs['pk'])        
        if form.is_valid():        
            initial_form_save = form.save(commit=False)
            initial_form_save.person = personObj
            initial_form_save.user = request.user
            initial_form_save.save()
            return redirect('/patient/{}/profile/'.format(kwargs['pk']))
        else:
            return render(request, self.template, {"person":personObj, "form":form})
        
class PersonVitalsCreate(ProfileMixin, View):    
    template = 'person/vitals_create.html'
    form = PersonVitalsForm

    
class PersonVitalsUpdate(PersonMixin, UpdateView):
    fields = ('body_temperature', 'blood_pressure', 'weight')    
    model = PersonVitals
    template_name = 'person/vitals_update.html'
    success_url = '/patient/'

    
class PersonContactsCreate(ProfileMixin, View):
    form = PersonContactForm
    template = 'person/contacts_create.html'

    
class PersonContactsUpdate(PersonMixin, UpdateView):
    fields = ('telephone', 'mailing_address', 'residence')    
    model = PersonContacts
    template_name = 'person/contacts_update.html'
    success_url = '/patient/'
    
    
class PersonDemographicCreate(ProfileMixin, View):
    form = PersonDemographicForm
    template = 'person/demographic_create.html'

    
class PersonDemographicUpdate(PersonMixin, UpdateView):
    fields = ('gender', 'date_of_birth', 'marital_status')
    model = PersonDemographic
    template_name = 'person/demographic_update.html'
    success_url = '/patient/'
    
    
class PersonGuardianCreate(ProfileMixin, View):
    form = PersonNextofKinForm    
    template = 'person/guardian_create.html'
    

class PersonGuardianUpdate(PersonMixin, UpdateView):
    fields = ('father_name', 'mother_name', 'guardian_occupation')
    model = PersonGuardian
    template_name = 'person/guardian_update.html'
    success_url = '/patient/'
